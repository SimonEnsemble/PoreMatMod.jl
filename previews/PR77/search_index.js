var documenterSearchIndex = {"docs":
[{"location":"manual/examples/","page":"Examples","title":"Examples","text":"DocTestSetup = quote\n    using PoreMatMod\nend","category":"page"},{"location":"manual/examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"manual/examples/","page":"Examples","title":"Examples","text":"The code and data files for all examples can be found here: Example Notebooks and Data","category":"page"},{"location":"manual/examples/","page":"Examples","title":"Examples","text":"Click on the images or descriptions below to see Pluto notebooks demonstrating each use case.","category":"page"},{"location":"manual/examples/#Generate-hypothetical-structures","page":"Examples","title":"Generate hypothetical structures","text":"","category":"section"},{"location":"manual/examples/","page":"Examples","title":"Examples","text":"     Example: ortho substitution with an acetylamido group at one quarter of the p-phenylene moieties in IRMOF-1.     (Image: example 1) ","category":"page"},{"location":"manual/examples/#Insert-missing-hydrogens","page":"Examples","title":"Insert missing hydrogens","text":"","category":"section"},{"location":"manual/examples/","page":"Examples","title":"Examples","text":"     Example: Insert missing H atoms in IRMOF-1     (Image: example 2) ","category":"page"},{"location":"manual/examples/#Repair-Disorder-and-Remove-Adsorbates","page":"Examples","title":"Repair Disorder and Remove Adsorbates","text":"","category":"section"},{"location":"manual/examples/","page":"Examples","title":"Examples","text":"     Example: correct the crystallographic disorder of the PyC-2 ligands and remove guest molecules from the pores.     (Image: example 3) ","category":"page"},{"location":"manual/examples/#Generate-Missing-Linker-Defect","page":"Examples","title":"Generate Missing-Linker Defect","text":"","category":"section"},{"location":"manual/examples/","page":"Examples","title":"Examples","text":"     Example: create a new channel in UiO-66 via missing-linker defects and formate ion capping.     (Image: example 4) ","category":"page"},{"location":"manual/start/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"manual/start/#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"manual/start/","page":"Getting Started","title":"Getting Started","text":"Download and install the Julia programming language, v1.6 or higher. Then, in the Julia REPL, open the package manager (using ]) and enter:","category":"page"},{"location":"manual/start/","page":"Getting Started","title":"Getting Started","text":"pkg> add PoreMatMod","category":"page"},{"location":"manual/start/","page":"Getting Started","title":"Getting Started","text":"Finally, load PoreMatMod.jl into the namespace:","category":"page"},{"location":"manual/start/","page":"Getting Started","title":"Getting Started","text":"julia> using PoreMatMod # That's it!","category":"page"},{"location":"manual/start/#Xtals.jl","page":"Getting Started","title":"Xtals.jl","text":"","category":"section"},{"location":"manual/start/","page":"Getting Started","title":"Getting Started","text":"PoreMatMod.jl is built on Xtals.jl, which provides the framework for representing and manipulating crystal structures.  It is recommended that the user be familiar with some of its key functions, which are re-exported by PoreMatMod, particularly [Crystal] and [infer_bonds!].","category":"page"},{"location":"manual/start/#A-Guiding-Example","page":"Getting Started","title":"A Guiding Example","text":"","category":"section"},{"location":"manual/start/","page":"Getting Started","title":"Getting Started","text":"This manual makes repeated reference to the following task: given the experimental structure of IRMOF-1, produce the hypothetical structure of an isoreticular MOF where the BDC linker has been replaced with a derivative, 2-acetylamido-BDC.","category":"page"},{"location":"manual/start/","page":"Getting Started","title":"Getting Started","text":"(Image: IRMOF-1_example)","category":"page"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"DocTestSetup = quote\n    using PoreMatMod\n    parent = Crystal(\"IRMOF-1.cif\")\n    infer_bonds!(parent, true)\nend","category":"page"},{"location":"manual/replace/#Find/Replace-Operations","page":"Substructure Find/Replace","title":"Find/Replace Operations","text":"","category":"section"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"In the previous sections, we saw how we can represent structures using the Xtals framework, and how we can identify substructure matches via Ullmann's algorithm for subgraph isomorphism. Next, we will see how to use this to effect a substructure replacement.","category":"page"},{"location":"manual/replace/#Orthogonal-Procrustes","page":"Substructure Find/Replace","title":"Orthogonal Procrustes","text":"","category":"section"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"The question of how best to align crystal fragments in space is addressed by the \"Orthogonal Procrustes\" problem.  If two point sets A and B have a known 1-to-1 correspondence mapping each point in A to a unique point in B, and A is a \"noisy\" rotated copy of B, we wish to find R, the rotation matrix that transforms A to reconstruct B with the minimum error.  This is accomplished via singular value decomposition of ABáµ€.  In the linked example A and B are two-dimensional for the purpose of visualization, but the solution to the problem is the same for point sets in any n-dimensional space.  In PoreMatMod.jl the solution is applied three-dimensionally, using the subgraph isomorphism identified by Ullmann's algorithm as the 1-to-1 correspondence.","category":"page"},{"location":"manual/replace/#The-Find-Replace-Algorithm","page":"Substructure Find/Replace","title":"The Find-Replace Algorithm","text":"","category":"section"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"With Ullmann's Algorithm (UA) and Orthogonal Procrustes (OP) in mind, we can tackle the problem of replacing the BDC linkers of IRMOF-1 with the 2-acetylamido derivative.","category":"page"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"First, we perform a search using a query with !-tagged atom(s), to direct the replacement stage of the algorithm. In this case, we should use 2-!-p-phenylene.xyz. Having performed a search and chosen one or more isomorphisms from the results, we have the 1-to-1 correspondence(s) we need to perform OP to align the coordinate systems of the parent and query.   Such a correspondence will be termed qp.  We also need to align the replacement moiety, 2-acetylamido-p-phenylene, with the query, so we perform a second UA.","category":"page"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"The query in this case is the original search moiety minus the subset of atoms tagged with !.  For 2-!-p-phenylene, this new search term is 1,2,4-dehydro-benzene, by deletion of the :H! at the 2 position of p-phenylene. Performing the second UA (seeking 1,2,4-dehydro-benzene in 2-acetylamido-p-phenylene) affords a second 1-to-1 correspondence, qr, the inverse of which is rq. Chaining these together, we have rp, the 1-to-1 correspondence for matching a subset of the replacement to a subset of the parent.","category":"page"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"OP with rq gives a rotation matrix which transforms the replacement by multiplication to align it with the coordinates of the parent crystal such that it can replace the linker at the chosen location.  The transformed replacement moiety is added to the crystal, overwriting the original location's atoms.","category":"page"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"PoreMatMod.jl does all of this in one line of user code. Bonds, including any across periodic boundaries, are preserved, the unit cell's dimensions are maintained, and the new structure can be saved to disk for use in simulations.","category":"page"},{"location":"manual/replace/#Inputs","page":"Substructure Find/Replace","title":"Inputs","text":"","category":"section"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"To guide replacement, the .xyz file input for the search moiety must be altered.   Simply adding ! after the atomic symbol tags that atom for replacement. The atom property viewer feature in iRASPA is conducive to this task.","category":"page"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"In the example of finding and replacing the 2 position H of the p-phenylene moieties of IRMOF-1, the input should have one H atom tagged, like so:","category":"page"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"H!         1.06706        0.70670        1.48683","category":"page"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"Load the new file in like before.","category":"page"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"query = moiety(\"2-!-p-phenylene.xyz\")\nsearch = query in parent","category":"page"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"The ! tag does not affect the outcome of substructure_search.","category":"page"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"s1 = substructure_search(moiety(\"p-phenylene.xyz\"), parent) \ns2 = substructure_search(moiety(\"2-!-p-phenylene.xyz\"), parent)\n\nnb_isomorphisms(s1) == nb_isomorphisms(s2) &&\nnb_locations(s1) == nb_locations(s2) &&\nisequal(nb_configs_at_loc(s1), nb_configs_at_loc(s2))\n# output\ntrue","category":"page"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"A final additional file input is required: a .xyz file containing the replacement.   This structure must contain a subgraph isomorphic to the non-tagged atoms of the query.","category":"page"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"To replace p-phenylene moieties with 2-acetylamido-p-phenylene moieties, load 2-acetylamido-p-phenylene.xyz:","category":"page"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"replacement = moiety(\"2-acetylamido-p-phenylene.xyz\")","category":"page"},{"location":"manual/replace/#Replacement-Modes","page":"Substructure Find/Replace","title":"Replacement Modes","text":"","category":"section"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"With all three file inputs loaded (IRMOF-1 as parent, 2-!-p-phenylene as query, and 2-acetylamido-p-phenylene as replacement) and a search performed, replacements can be made.","category":"page"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"PoreMatMod.jl has several replacement modes, one of which must be specified.","category":"page"},{"location":"manual/replace/#Optimal-orientation-at-each-location","page":"Substructure Find/Replace","title":"Optimal orientation at each location","text":"","category":"section"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"Optimal configurations will be chosen for each location in search.results, so that each occurrence of the query in the parent is replaced with minimal perturbation of the conserved atoms from the parent structure.","category":"page"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"substructure_replace(search, replacement)","category":"page"},{"location":"manual/replace/#Optimal-orientation-at-n-random-locations","page":"Substructure Find/Replace","title":"Optimal orientation at n random locations","text":"","category":"section"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"The parent will be modified using optimal configurations at each of n randomly-selected locations.","category":"page"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"substructure_replace(search, replacement, nb_loc=4)","category":"page"},{"location":"manual/replace/#Optimal-orientation-at-specific-locations","page":"Substructure Find/Replace","title":"Optimal orientation at specific locations","text":"","category":"section"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"The parent is modified using optimal configurations at a list of specified locations.","category":"page"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"substructure_replace(search, replacement, loc=[13, 20])","category":"page"},{"location":"manual/replace/#Specific-orientations-at-specific-locations","page":"Substructure Find/Replace","title":"Specific orientations at specific locations","text":"","category":"section"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"Specific replacements are made by providing the values of loc and ori. If any values in ori are zero, the corresponding location will processed with the optimal replacement.","category":"page"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"substructure_replace(search, replacement, loc=[13, 20], ori=[1, 0])","category":"page"},{"location":"manual/replace/#Random-orientations","page":"Substructure Find/Replace","title":"Random orientations","text":"","category":"section"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"By using the random keyword argument, the search for optimal alignment can be skipped, with the value of ori being selected at random.","category":"page"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"substructure_replace(search, replacement, nb_loc=3, random=true)","category":"page"},{"location":"manual/replace/#Simple-syntax","page":"Substructure Find/Replace","title":"Simple syntax","text":"","category":"section"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"Generally, it is advisable to perform the search and use substructure_replace, as multiple replacement tasks can be performed with a single searching step. The search is usually the slowest step, and it is desirable not to perform it repeatedly. However, for one-shot find-and-replace operations, the replace function syntax from standard Julia may be used:","category":"page"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"replace(parent, query => replacement)","category":"page"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"Note it is still required to specify a replacement style via keyword argument.","category":"page"},{"location":"manual/replace/#Documentation","page":"Substructure Find/Replace","title":"Documentation","text":"","category":"section"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"substructure_replace","category":"page"},{"location":"manual/replace/#PoreMatMod.substructure_replace","page":"Substructure Find/Replace","title":"PoreMatMod.substructure_replace","text":"substructure_replace(search, replacement, nb_loc=2)\n\nInserts replacement into a parent structure according to search and kwargs. Provide a replacement style kwarg to direct the location and orientation of replacements. Default behavior is to seek the replacement operation with lowest RMSD on spatial alignment. Returns a new Crystal with the specified modifications (returns search.search.parent if no replacements are made)\n\nArguments\n\nsearch::Search the Search for a substructure moiety in the parent crystal\nreplacement::Crystal the moiety to use for replacement of the searched substructure\nrandom::Bool set true to select random replacement orientations\nnb_loc::Int assign a value to select random replacement at nb_loc random locations\nloc::Array{Int} assign value(s) to select specific locations for replacement.  If ori is not specified, replacement orientation is random.\nori::Array{Int} assign value(s) when loc is assigned to specify exact configurations for replacement. 0 values mean the configuration at that location should be selected for optimal alignment with the parent.\nname::String assign to give the generated Crystal a name (\"new_xtal\" by default)\nverbose::Bool set true to print console messages about the replacement(s) being performed\n\n\n\n\n\n","category":"function"},{"location":"collab/#Collaborating/Contributing","page":"Collaborate","title":"Collaborating/Contributing","text":"","category":"section"},{"location":"collab/#PoreMatMod.jl-Wants-You!","page":"Collaborate","title":"PoreMatMod.jl Wants You!","text":"","category":"section"},{"location":"collab/","page":"Collaborate","title":"Collaborate","text":"This project is still being actively developed, and we would love to see its scope grow. Please post issues and/or make pull requests for fixes, new features, etc.","category":"page"},{"location":"manual/PoreMatModGO/#PoreMatModGO","page":"PoreMatModGO","title":"PoreMatModGO","text":"","category":"section"},{"location":"manual/PoreMatModGO/","page":"PoreMatModGO","title":"PoreMatModGO","text":"To make PoreMatMod.jl more accessible, an express graphical interface, PoreMatModGO, is provided.   The PoreMatModGO interface, built on Pluto.jl, enables interactive application of chemical substructure find/replace operations with minimal setup and no code provided by the user.","category":"page"},{"location":"manual/PoreMatModGO/","page":"PoreMatModGO","title":"PoreMatModGO","text":"Follow the steps in Getting Started.","category":"page"},{"location":"manual/PoreMatModGO/","page":"PoreMatModGO","title":"PoreMatModGO","text":"Then, add the required dependencies and launch Pluto.jl:","category":"page"},{"location":"manual/PoreMatModGO/","page":"PoreMatModGO","title":"PoreMatModGO","text":"pkg> add Pluto, PlutoUI, Bio3DView\njulia> using Pluto\njulia> Pluto.run()","category":"page"},{"location":"manual/PoreMatModGO/","page":"PoreMatModGO","title":"PoreMatModGO","text":"Pluto should launch in a new tab in your default web browser.","category":"page"},{"location":"manual/PoreMatModGO/","page":"PoreMatModGO","title":"PoreMatModGO","text":"Load PoreMatModGO.jl by copying and pasting the URL below into the \"Open from file\" box on the Pluto main page.","category":"page"},{"location":"manual/PoreMatModGO/","page":"PoreMatModGO","title":"PoreMatModGO","text":"https://raw.githubusercontent.com/SimonEnsemble/PoreMatMod.jl/master/src/PoreMatModGO.jl","category":"page"},{"location":"manual/PoreMatModGO/","page":"PoreMatModGO","title":"PoreMatModGO","text":"Prepare file inputs per the manual and load them into PoreMatModGO using the graphical interface.   All replacement modes are available with interactive visual previews and outputs are downloadable in .cif, .xyz, and .vtk file formats.","category":"page"},{"location":"manual/inputs/","page":"Loading Data","title":"Loading Data","text":"DocTestSetup = quote\n    using PoreMatMod\nend","category":"page"},{"location":"manual/inputs/#Input-Files","page":"Loading Data","title":"Input Files","text":"","category":"section"},{"location":"manual/inputs/","page":"Loading Data","title":"Loading Data","text":"This section details the handling of data paths, formatting of input files, and loading of data into PoreMatMod.jl.","category":"page"},{"location":"manual/inputs/#Data-Directories","page":"Loading Data","title":"Data Directories","text":"","category":"section"},{"location":"manual/inputs/","page":"Loading Data","title":"Loading Data","text":"PoreMatMod.jl draws its basic working data (atomic masses, covalent radii, etc.) from Xtals.jl.","category":"page"},{"location":"manual/inputs/","page":"Loading Data","title":"Loading Data","text":"Structural data are drawn from rc[:paths][:crystals] and rc[:paths][:moieties]. These paths are set at module load time, and default to ./data/crystals and ./data/moieties, respectively.","category":"page"},{"location":"manual/inputs/#Input-Files-and-Formats","page":"Loading Data","title":"Input Files and Formats","text":"","category":"section"},{"location":"manual/inputs/#Crystals","page":"Loading Data","title":"Crystals","text":"","category":"section"},{"location":"manual/inputs/","page":"Loading Data","title":"Loading Data","text":"PoreMatMod.jl requires chemical structural data as input.  The first necessary input is a .cif or .cssr file containing atomic coordinates and unit cell information.","category":"page"},{"location":"manual/inputs/","page":"Loading Data","title":"Loading Data","text":"(Image: Ti-MIL-125)","category":"page"},{"location":"manual/inputs/","page":"Loading Data","title":"Loading Data","text":"The file must be located in rc[:paths][:crystals] as described above. In the case of our guiding example, the functionalization of IRMOF-1, this means we need to either put IRMOF-1.cif into ./data/crystals or set rc[:paths][:crystals] to point PoreMatMod.jl to where it is located.","category":"page"},{"location":"manual/inputs/#Fragments","page":"Loading Data","title":"Fragments","text":"","category":"section"},{"location":"manual/inputs/","page":"Loading Data","title":"Loading Data","text":"The next required input is a .xyz file containing the atomic coordinates of a search moietyâ€“a chemical substructure to identify in the crystal.   The .xyz format is simple: the first line gives the number of input lines which follow, and each subsequent input line consists of the atom label in the first space-delimited column, followed by 3 columns for the atom's Cartesian coordinates in â„«ngstrÃ¶ms.","category":"page"},{"location":"manual/inputs/","page":"Loading Data","title":"Loading Data","text":"For use with PoreMatMod.jl, .xyz data must have clean atom labels, meaning only plain atomic symbols.  The exception is the use of ! for indicating atoms which will be altered in a replace operation.  For substructure searches using [substructure_search], any ! tags are ignored (the atoms are treated as normal).","category":"page"},{"location":"manual/inputs/","page":"Loading Data","title":"Loading Data","text":"(Image: query fragment)","category":"page"},{"location":"manual/inputs/","page":"Loading Data","title":"Loading Data","text":"The .xyz file must be located at rc[:paths][:moieties]. For what we want to do with IRMOF-1, the best choice is to search for the p-phenylene.xyz moiety that is the core of the BDC linker.","category":"page"},{"location":"manual/inputs/#Loading-Files","page":"Loading Data","title":"Loading Files","text":"","category":"section"},{"location":"manual/inputs/","page":"Loading Data","title":"Loading Data","text":"Load IRMOF-1.cif and build the bonding network:","category":"page"},{"location":"manual/inputs/","page":"Loading Data","title":"Loading Data","text":"parent = Crystal(\"IRMOF-1.cif\")\ninfer_bonds!(parent, true)","category":"page"},{"location":"manual/inputs/","page":"Loading Data","title":"Loading Data","text":"Crystal is inherited and re-exported from Xtals.jl. See the docs for more information.","category":"page"},{"location":"manual/inputs/","page":"Loading Data","title":"Loading Data","text":"Load p-phenylene.xyz:","category":"page"},{"location":"manual/inputs/","page":"Loading Data","title":"Loading Data","text":"query = moiety(\"p-phenylene.xyz\")","category":"page"},{"location":"manual/inputs/","page":"Loading Data","title":"Loading Data","text":"Both parent and query are Crystal objects.","category":"page"},{"location":"manual/inputs/#Documentation","page":"Loading Data","title":"Documentation","text":"","category":"section"},{"location":"manual/inputs/","page":"Loading Data","title":"Loading Data","text":"moiety","category":"page"},{"location":"manual/inputs/#PoreMatMod.moiety","page":"Loading Data","title":"PoreMatMod.moiety","text":"moiety(name)\n\nGenerates a moiety (Crystal) from an .xyz file found in rc[:paths][:moieties]\n\nUse set_path_to_data or set rc[:paths][:moieties] to change the input path.\n\nAtoms appended with '!' are tagged for replacement via substructure_replace.\n\nBonds are inferred automatically.\n\nArguments\n\nname::String the moiety input file name.\n\n\n\n\n\n","category":"function"},{"location":"","page":"PoreMatMod","title":"PoreMatMod","text":"(Image: logo.JPG)","category":"page"},{"location":"","page":"PoreMatMod","title":"PoreMatMod","text":"A pure-Julia software package for manipulating chemical structures of porous crystals.  ","category":"page"},{"location":"","page":"PoreMatMod","title":"PoreMatMod","text":"PoreMatMod.jl is built on the @SimonEnsemble software Xtals.jl and is interoperable with PorousMaterials.jl and other molecular dynamics or ab initio software packages.","category":"page"},{"location":"","page":"PoreMatMod","title":"PoreMatMod","text":"It is intended primarily for working with MOFs and other porous crystalline materials, but can work with other periodic structures, ensembles, and discrete molecules as well. Use cases include:","category":"page"},{"location":"","page":"PoreMatMod","title":"PoreMatMod","text":"tuning the chemistry of existing crystal structure models to generate libraries of hypothetical materials for computational screening\ngenerating heterogeneous, multi-linker MOFs with precise control of functional group placement\nrepairing artifacts in crystal structuresâ€”such as missing hydrogen atoms, disorder, and the presence of solventsâ€”determined from XRD\nintroducing missing-linker and missing-SBU defects into MOFs to enable computational studies on defect-property relationships\nsearching for subgraphs in libraries of crystal structure models to, e.g., filter structures or characterize the diversity of the library","category":"page"},{"location":"","page":"PoreMatMod","title":"PoreMatMod","text":"PoreMatMod.jl can identify chemical substructures, create hypothetical structure libraries, and correct disorder in experimental data, using an implementation of Ullmann's algorithm for substructure isomorphism and the orthogonal Procrustes algorithm for point cloud alignment.   Periodic cell boundaries are treated automatically, and the unit cell is preserved in transformations.","category":"page"},{"location":"","page":"PoreMatMod","title":"PoreMatMod","text":"Example: repairing, activating, and functionalizing an experimental structure. The structure below, of a MOF called SIFSIX-2-Cu-i, contains disordered PyC2 linkers and acetylene guest molecules.","category":"page"},{"location":"","page":"PoreMatMod","title":"PoreMatMod","text":"(Image: messy to novel)","category":"page"},{"location":"","page":"PoreMatMod","title":"PoreMatMod","text":"Loading the data, resolving the disorder, removing the guest molecules, replacing the linkers, and saving the result can be done with a very short script:","category":"page"},{"location":"","page":"PoreMatMod","title":"PoreMatMod","text":"# Import the module\nusing PoreMatMod\n# Load some messy data\nxtal = Crystal(\"SIFSIX-2-Cu-i.cif\", check_overlap=false)\ninfer_bonds!(xtal, true)\n# Repair the disordered linkers\nrepaired = replace(xtal, moiety(\"disordered_ligand!.xyz\") => moiety(\"4-pyridyl.xyz\"))\n# Remove the guest molecules to produce the activated MOF\nsearch = substructure_search(moiety(\"acetylene.xyz\"), repaired, disconnected_component=true)\nactivated = substructure_replace(search, nothing)\n# Add a functional group\nnovel = replace(activated, moiety(\"3-H!-4-pyridyl.xyz\") => moiety(\"3-F-4-pyridyl.xyz\"))\n# Save the result\nwrite_cif(novel, \"3,3'-F2-SIFSIX-2-Cu-i.cif\")","category":"page"},{"location":"","page":"PoreMatMod","title":"PoreMatMod","text":"Input files: input_files.zip","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"DocTestSetup = quote\n    using PoreMatMod\n    parent = Crystal(\"IRMOF-1.cif\")\n    infer_bonds!(parent, true)\n    query = moiety(\"p-phenylene.xyz\")\nend","category":"page"},{"location":"manual/find/#Substructure-Searches","page":"Substructure Search","title":"Substructure Searches","text":"","category":"section"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"Having seen how to load inputs to PoreMatMod.jl, we can take the next step towards accomplishing our example task of functionalizing IRMOF-1.  In order to identify the p-phenylene moiety in IRMOF-1, a variation of Ullmann's algorithm is applied.","category":"page"},{"location":"manual/find/#Ullmann's-Algorithm","page":"Substructure Search","title":"Ullmann's Algorithm","text":"","category":"section"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"Ullmann's algorithm for subgraph isomorphism is the basis of the substructure search in PoreMatMod.  The algorithm is a depth-first search of the permutation tree for all possible one-to-one correspondences between the nodes of one graph (the query) and any subset of nodes of another graph (the parent).  The search tree is greatly reduced in size by imposing several constraints on possible node-to-node correspondences.  At each branch of the search tree, additional pruning further reduces the search space by comparing the immediate neighborhoods of potentially-corresponding nodes.","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"PoreMatMod.jl augments Ullmann's algorithm to include the requirement that potentially-corresponding nodes be of the same atomic species, as required by the chemical structure application.  Additionally, the number of initial potential matches is reduced by further examination of each atom's local bonding neighborhood.   Bonds across the unit cell boundaries of periodic materials are handled innately by the graph representation of structures in Xtals.jl.","category":"page"},{"location":"manual/find/#Searching-with-PoreMatMod.jl","page":"Substructure Search","title":"Searching with PoreMatMod.jl","text":"","category":"section"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"(Image: find graphic)","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"With a parent and query loaded, execute a search:","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"search = substructure_search(query, parent)\n# output\np-phenylene.xyz âˆˆ IRMOF-1.cif\n96 hits in 24 locations.","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"The âˆˆ (in) infix operator will also perform the search:","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"search = query âˆˆ parent\n# output\np-phenylene.xyz âˆˆ IRMOF-1.cif\n96 hits in 24 locations.","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"This returns a Search object.   Its search attribute stores the Crystal data for the query and parent structures, and its results attribute is a GroupedDataFrame listing the subgraph isomorphisms grouped by location.","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"search.search\n# output\np-phenylene.xyz âˆˆ IRMOF-1.cif","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"typeof(search.search.query)\n# output\nCrystal","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"search.search.query.name\n# output\n\"p-phenylene.xyz\"","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"search.results\n# output\nGroupedDataFrame with 24 groups based on key: location\nFirst Group (4 rows): location = 1\n Row â”‚ location  isomorphism\n     â”‚ Int64     Arrayâ€¦\nâ”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n   1 â”‚        1  [233, 306, 318, 245, 185, 197, 4â€¦\n   2 â”‚        1  [245, 318, 306, 233, 197, 185, 4â€¦\n   3 â”‚        1  [306, 233, 245, 318, 185, 197, 3â€¦\n   4 â”‚        1  [318, 245, 233, 306, 197, 185, 3â€¦\nâ‹®\nLast Group (4 rows): location = 24\n Row â”‚ location  isomorphism\n     â”‚ Int64     Arrayâ€¦\nâ”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n   1 â”‚       24  [288, 311, 326, 301, 228, 229, 4â€¦\n   2 â”‚       24  [301, 326, 311, 288, 229, 228, 4â€¦\n   3 â”‚       24  [311, 288, 301, 326, 228, 229, 3â€¦\n   4 â”‚       24  [326, 301, 288, 311, 229, 228, 3â€¦","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"In the chosen example, the search moiety (p-phenylene) occurs 24 times in the provided structure of the parent crystal (IRMOF-1), with 4 symmetry-equivalent search hits at each site, for a total of 96 subgraph isomorphisms.","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"nb_locations(search) \n# output\n24","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"nb_configs_at_loc(search)  # 24-element Vector{Int64}: [4, 4, 4, ..., 4]","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"nb_isomorphisms(search) \n# output\n96","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"To generate a Crystal containing only the substructures of the parent which are isomorphic to the query, use:","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"isomorphic_substructures(search)","category":"page"},{"location":"manual/find/#Molecular-and-Graph-Symmetry","page":"Substructure Search","title":"Molecular and Graph Symmetry","text":"","category":"section"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"Due to the representation of molecules as graphs, PoreMatMod.jl may yield \"extra\" search results corresponding to different spatial isomers or moiety orientations. In some applications this may be advantageous, but in most cases it is advisable to search using the most minimal structure which uniquely matches the targeted parent moiety.","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"An example is searching for BDC.xyz in IRMOF-1 instead of the more minimal p-phenylene. Thanks to the two carboxyl groups, the total number of isomorphisms is multiplied by a factor of 4, due to the graph-equivalence of the oxygen atoms in each group.   The number of locations at which the isomorphisms are found, however, is unchanged.","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"query = moiety(\"BDC.xyz\")\nsearch = query âˆˆ parent\nnb_isomorphisms(search) \n# output\n384","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"nb_locations(search) \n# output\n24","category":"page"},{"location":"manual/find/#Documentation","page":"Substructure Search","title":"Documentation","text":"","category":"section"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"Search\nSearchTerms\nsubstructure_search\nnb_configs_at_loc\nnb_isomorphisms\nnb_locations\nisomorphic_substructures","category":"page"},{"location":"manual/find/#PoreMatMod.Search","page":"Substructure Search","title":"PoreMatMod.Search","text":"Search(search_terms, results)\n\nStores the SearchTerms used for a substructure search, and the results DataFrame returned by carrying out the search.  Results are grouped by location in the parent Crystal and can be examined using nb_isomorphisms, nb_locations, and nb_configs_at_loc.  Subgraph isomorphisms are encoded like\n\n`isom = [7, 21, 9]`\n\nwhere isom[i] is the index of the atom in search.search.parent corresponding to atom i in search.search.query for the location and orientation specific to isom.\n\n\n\n\n\n","category":"type"},{"location":"manual/find/#PoreMatMod.SearchTerms","page":"Substructure Search","title":"PoreMatMod.SearchTerms","text":"SearchTerms(parent, query)\n\nStores the Crystal inputs used to generate a Search\n\n\n\n\n\n","category":"type"},{"location":"manual/find/#PoreMatMod.substructure_search","page":"Substructure Search","title":"PoreMatMod.substructure_search","text":"substructure_search(query, parent; disconnected_component=false)\n\nSearches for a substructure within a Crystal and returns a Search struct containing all identified subgraph isomorphisms.  Matches are made on the basis of atomic species and chemical bonding networks, including bonds across unit cell periodic boundaries.  The search moiety may optionally contain markup for designating atoms to replace with other moieties.\n\nArguments\n\nquery::Crystal the search moiety\nparent::Crystal the parent structure\ndisconnected_component::Bool=false if true, disables substructure searching (e.g. for finding guest molecules)\n\n\n\n\n\n","category":"function"},{"location":"manual/find/#PoreMatMod.nb_configs_at_loc","page":"Substructure Search","title":"PoreMatMod.nb_configs_at_loc","text":"nb_configs_at_loc(search)\n\nReturns a array containing the number of isomorphic configurations at a given location (collection of atoms) for which the specified Search results contain isomorphisms.\n\nArguments\n\nsearch::Search a substructure Search object\n\n\n\n\n\n","category":"function"},{"location":"manual/find/#PoreMatMod.nb_isomorphisms","page":"Substructure Search","title":"PoreMatMod.nb_isomorphisms","text":"nb_isomorphisms(search::Search)\n\nReturns the number of isomorphisms found in the specified Search\n\nArguments\n\nsearch::Search a substructure Search object\n\n\n\n\n\n","category":"function"},{"location":"manual/find/#PoreMatMod.nb_locations","page":"Substructure Search","title":"PoreMatMod.nb_locations","text":"nb_locations(search::Search)\n\nReturns the number of unique locations (collections of atoms) at which the specified Search results contain isomorphisms.\n\nArguments\n\nsearch::Search a substructure Search object\n\n\n\n\n\n","category":"function"},{"location":"manual/find/#PoreMatMod.isomorphic_substructures","page":"Substructure Search","title":"PoreMatMod.isomorphic_substructures","text":"iso_structs = isomorphic_substructures(s::Search)::Crystal\n\nReturns a crystal consisting of the atoms involved in subgraph isomorphisms in the search s\n\n\n\n\n\n","category":"function"}]
}
