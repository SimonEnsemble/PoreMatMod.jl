var documenterSearchIndex = {"docs":
[{"location":"manual/start/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"manual/start/#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"manual/start/","page":"Getting Started","title":"Getting Started","text":"Download and install the Julia programming language, at version 1.6 or higher. PoreMatMod.jl is not currently stable on version 1.7.","category":"page"},{"location":"manual/start/","page":"Getting Started","title":"Getting Started","text":"To install PoreMadMod.jl (officially registered as a Julia package), in the Julia REPL, enter the package manager by typing ] and enter:","category":"page"},{"location":"manual/start/","page":"Getting Started","title":"Getting Started","text":"pkg> add PoreMatMod","category":"page"},{"location":"manual/start/#Loading-the-PoreMatMod.jl-package","page":"Getting Started","title":"Loading the PoreMatMod.jl package","text":"","category":"section"},{"location":"manual/start/","page":"Getting Started","title":"Getting Started","text":"To load the PoreMatMod.jl package, so that its functions are imported into your namespace, in your Julia code:","category":"page"},{"location":"manual/start/","page":"Getting Started","title":"Getting Started","text":"julia> using PoreMatMod","category":"page"},{"location":"manual/start/","page":"Getting Started","title":"Getting Started","text":"We recommend writing Julia code and performing find-and-replace tasks with PoreMadMod.jl using interactive Pluto notebooks.","category":"page"},{"location":"manual/start/#Running-tests-(optional)","page":"Getting Started","title":"Running tests (optional)","text":"","category":"section"},{"location":"manual/start/","page":"Getting Started","title":"Getting Started","text":"Run the unit tests associated with PoreMatMod.jl by entering package mode in the Julia REPL via (]) and entering:","category":"page"},{"location":"manual/start/","page":"Getting Started","title":"Getting Started","text":"pkg> test PoreMatMod","category":"page"},{"location":"manual/start/","page":"Getting Started","title":"Getting Started","text":"note: Note\nPoreMatMod.jl is built on Xtals.jl, which provides:the data structure and reader, Crystal, for crystal structures \nthe infer_bonds! function that assigns bonds between atoms of a Crystal","category":"page"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"DocTestSetup = quote\n    using PoreMatMod\nend","category":"page"},{"location":"manual/replace/#Find/Replace-Operations","page":"Substructure Find/Replace","title":"Find/Replace Operations","text":"","category":"section"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"Suppose we wish to conduct the find-and-replace operations illustrated in the figure below, to produce an acetylamido-functionalized IRMOF-1 structure.","category":"page"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"(Image: replacement scheme)","category":"page"},{"location":"manual/replace/#the-parent-structure","page":"Substructure Find/Replace","title":"the parent structure","text":"","category":"section"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"First, we load the parent IRMOF-1 structure and infer its bonds.","category":"page"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"parent = Crystal(\"IRMOF-1.cif\")\ninfer_bonds!(parent, true)","category":"page"},{"location":"manual/replace/#the-query-fragment","page":"Substructure Find/Replace","title":"the query fragment","text":"","category":"section"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"Next, we define a query fragment as a p-phenylene moiety. To guide the replacement, the masked atoms of the query fragment must be annotated with ! in the .xyz input file by appending a ! character at the end of their atomic symbols. The atom property viewer feature in iRASPA is useful for figuring out which atom(s) to mask.","category":"page"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"note: Note\nA masked atom (marked with !) in the query fragment implies that the corresponding atom of the parent crystal structure (i) must be removed [e.g., to make room for replacement with a different functionality] but (ii) does not correspond with an atom on the replacement fragment and thus cannot be used in the process of aligning the replacement fragment onto the parent crystal. ","category":"page"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"In our example, in 2-!-p-phenylene.xyz input file describing our p-phenylene query fragment, one H atom is masked (see figure above):","category":"page"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"10\n\nC         -1.71069        0.96969       -0.46280\nC         -0.48337        1.30874        0.11690\nC         -2.33707       -0.23371       -0.12103\nC          0.11757        0.44439        1.03836\nC         -0.50881       -0.75900        1.38013\nC         -1.73613       -1.09805        0.80043\nH!         1.06706        0.70670        1.48683\nH          0.00122        2.23972       -0.14750\nH         -3.28655       -0.49601       -0.56950\nH         -2.22071       -2.02904        1.06484","category":"page"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"We then read the input file for the query fragment.","category":"page"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"query = moiety(\"2-!-p-phenylene.xyz\")","category":"page"},{"location":"manual/replace/#the-replacement-fragment","page":"Substructure Find/Replace","title":"the replacement fragment","text":"","category":"section"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"Next, we read in the acetylamido-functionalized version of the query fragment, 2-acetylamido-p-phenylene.xyz, as the replacement fragment:","category":"page"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"replacement = moiety(\"2-acetylamido-p-phenylene.xyz\")","category":"page"},{"location":"manual/replace/#the-find-step","page":"Substructure Find/Replace","title":"the find step","text":"","category":"section"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"We search for subgraphs of the parent structure that match the query fragment. Note the ! tags are ignored during the substructure_search.","category":"page"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"search = query in parent # equivalent to substructure_search(query, parent)","category":"page"},{"location":"manual/replace/#the-replace-step","page":"Substructure Find/Replace","title":"the replace step","text":"","category":"section"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"The code below will, at each location in the parent where a substructure matched the query fragment, choose a random orientation (corresponding to an overlay of the query with the substructure), align and install the replacement fragment, then remove the original substructure, giving the child structure shown in the figure above.","category":"page"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"child = substructure_replace(search, replacement)","category":"page"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"To direct the number, location, and orientation of the replacements, use the keyword arguments for substructure_replace. Particularly, the location loc and orientation ori keyword arguments specify a particular isomorphism to use (in reference to search.isomorphisms) when conducting a replacement operation. The figure below illustrates.","category":"page"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"(Image: loc/ori example)","category":"page"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"For more details, see the search docs and the replacement modes example.","category":"page"},{"location":"manual/replace/#quick-find-and-replace-syntax","page":"Substructure Find/Replace","title":"quick find-and-replace syntax","text":"","category":"section"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"For one-shot find-and-replace operations, the replace function may be used:","category":"page"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"child = replace(parent, query => replacement)","category":"page"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"note: Note\nGenerally, it is advisable to perform the search using substructure_replace then pass it to replace, as multiple replacement tasks can then be performed on the basis of the search step as opposed to repeating it for each replacement. The search is usually the slowest step, and it is desirable not to perform it repeatedly.","category":"page"},{"location":"manual/replace/#Documentation-of-functions","page":"Substructure Find/Replace","title":"Documentation of functions","text":"","category":"section"},{"location":"manual/replace/","page":"Substructure Find/Replace","title":"Substructure Find/Replace","text":"substructure_replace\nreplace","category":"page"},{"location":"manual/replace/#PoreMatMod.substructure_replace","page":"Substructure Find/Replace","title":"PoreMatMod.substructure_replace","text":"child = substructure_replace(search, replacement; random=false, nb_loc=0, loc=Int[], ori=Int[], name=\"new_xtal\", verbose=false, remove_duplicates=false, periodic_boundaries=true)\n\nReplace the substructures of search.parent matching the search.query fragment with the replacement fragment, at locations and orientations specified by the keyword arguments random, nb_loc, loc, and ori. Default behavior is to effect replacements at all \"hit\" locations in the parent structure and, at each location, choose the orientation giving the optimal (lowest error) spatial aligment.\n\nReturns a new Crystal with the specified modifications (returns search.parent if no replacements are made).\n\nArguments\n\nsearch::Search the Search for a substructure moiety in the parent crystal\nreplacement::Crystal the moiety to use for replacement of the searched substructure\nrandom::Bool set true to select random replacement orientations\nnb_loc::Int assign a value to select random replacement at nb_loc random locations\nloc::Array{Int} assign value(s) to select specific locations for replacement.  If ori is not specified, replacement orientation is random.\nori::Array{Int} assign value(s) when loc is assigned to specify exact configurations for replacement. 0 values mean the configuration at that location should be selected for optimal alignment with the parent.\nname::String assign to give the generated Crystal a name (\"new_xtal\" by default)\nverbose::Bool set true to print console messages about the replacement(s) being performed\nremove_duplicates::Bool set true to automatically combine overlapping atoms of the same species in generated structures.\nreinfer_bonds::Bool set true to re-infer bonds after producing a structure\nperiodic_boundaries::Bool set false to disable periodic boundary conditions when checking for atom duplication or re-inferring bonds\n\n\n\n\n\n","category":"function"},{"location":"manual/replace/#Base.replace","page":"Substructure Find/Replace","title":"Base.replace","text":"child = replace(parent, query => replacement)\n\nGenerates a child crystal structure by (i) searches the parent crystal structure for subgraphs that match the query then  (ii) replaces the substructures of the parent matching the query fragment with the replacement fragment.\n\nEquivalent to calling substructure_replace(query ∈ parent, replacement).\n\nAccepts the same keyword arguments as substructure_replace.\n\n\n\n\n\n","category":"function"},{"location":"collab/#Contributing/Reporting-Issues","page":"Contribute/Report Issues","title":"Contributing/Reporting Issues","text":"","category":"section"},{"location":"collab/#Reporting-Issues","page":"Contribute/Report Issues","title":"Reporting Issues","text":"","category":"section"},{"location":"collab/","page":"Contribute/Report Issues","title":"Contribute/Report Issues","text":"Please report any bugs or make suggestions for improvements by filing an issue on Github here.","category":"page"},{"location":"collab/#PoreMatMod.jl-Wants-You!","page":"Contribute/Report Issues","title":"PoreMatMod.jl Wants You!","text":"","category":"section"},{"location":"collab/","page":"Contribute/Report Issues","title":"Contribute/Report Issues","text":"We welcome contributions (pull requests) for bug fixes, improvements, new features, etc. If the change is fundamental/major, please post an issue to discuss first.","category":"page"},{"location":"manual/inputs/","page":"Loading Data","title":"Loading Data","text":"DocTestSetup = quote\n    using PoreMatMod\nend","category":"page"},{"location":"manual/inputs/#Reading-data-from-crystal-structure-and-chemical-fragment-files-into-PoreMatMod.jl","page":"Loading Data","title":"Reading data from crystal structure and chemical fragment files into PoreMatMod.jl","text":"","category":"section"},{"location":"manual/inputs/","page":"Loading Data","title":"Loading Data","text":"This section details how to load data into PoreMatMod.jl, including the handling of paths to data and input file formats.","category":"page"},{"location":"manual/inputs/#Crystal-structures","page":"Loading Data","title":"Crystal structures","text":"","category":"section"},{"location":"manual/inputs/","page":"Loading Data","title":"Loading Data","text":"Accepted file formats for crystal structures (containing atomic coordinates and unit cell information) are .cif (see here) and .cssr.","category":"page"},{"location":"manual/inputs/","page":"Loading Data","title":"Loading Data","text":"Crystal structure files (.cif, .cssr) are read from the path rc[:paths][:crystals].","category":"page"},{"location":"manual/inputs/","page":"Loading Data","title":"Loading Data","text":"example: Example\nRead in the crystal structure of IRMOF-1.cif and infer its bonding graph:parent = Crystal(\"IRMOF-1.cif\")\ninfer_bonds!(parent, true) # true b/c we want periodic bonds included","category":"page"},{"location":"manual/inputs/","page":"Loading Data","title":"Loading Data","text":"The Crystal constructor returns a Crystal data structure. The infer_bonds! function infers the bonding graph of the crystal structure (nodes: atoms, edges: bonds) based on interatomic distances–-necessary for subgraph matching. Both Crystal and infer_bonds! are inherited from Xtals.jl (see the docs). ","category":"page"},{"location":"manual/inputs/#Query-and-Replacement-Fragments","page":"Loading Data","title":"Query and Replacement Fragments","text":"","category":"section"},{"location":"manual/inputs/","page":"Loading Data","title":"Loading Data","text":"Accepted file formats for chemical fragments (list of atoms and their Cartesian coordinates) are .xyz (see here).","category":"page"},{"location":"manual/inputs/","page":"Loading Data","title":"Loading Data","text":"Query and replacement fragment files (.xyz) are read from the path rc[:paths][:moieties].","category":"page"},{"location":"manual/inputs/","page":"Loading Data","title":"Loading Data","text":"N.b. masked atoms of query fragments must be labeled with ! for replace operations. For substructure searches using substructure_search, any ! tags are ignored (the atoms are treated according to their chemical species).","category":"page"},{"location":"manual/inputs/","page":"Loading Data","title":"Loading Data","text":"example: Example\nRead in the chemical fragment p-phenylene.xyz:query = moiety(\"p-phenylene.xyz\")","category":"page"},{"location":"manual/inputs/","page":"Loading Data","title":"Loading Data","text":"The moiety reader also returns a Crystal data structure but with a (arbitrary) unit cube unit cell.","category":"page"},{"location":"manual/inputs/#Changing-the-Data-Directories","page":"Loading Data","title":"Changing the Data Directories","text":"","category":"section"},{"location":"manual/inputs/","page":"Loading Data","title":"Loading Data","text":"rc[:paths][:crystals] and rc[:paths][:moieties] default to ./data/crystals and ./data/moieties, respectively.","category":"page"},{"location":"manual/inputs/","page":"Loading Data","title":"Loading Data","text":"To change the paths from where the input files are read, change rc[:paths][:crystals] and rc[:paths][:moieties].","category":"page"},{"location":"manual/inputs/","page":"Loading Data","title":"Loading Data","text":"example: Example\nSuppose we wish to store our .cif files in ~/my_xtals and our .xyz files in our present working directory.rc[:paths][:crystals] = joinpath(homedir(), \"my_xtals\")\nrc[:paths][:moiety] = pwd()                                  ","category":"page"},{"location":"manual/inputs/#Other-data","page":"Loading Data","title":"Other data","text":"","category":"section"},{"location":"manual/inputs/","page":"Loading Data","title":"Loading Data","text":"PoreMatMod.jl draws atomic masses and covalent radii from Xtals.jl.","category":"page"},{"location":"manual/inputs/#Detailed-documentation-for-functions","page":"Loading Data","title":"Detailed documentation for functions","text":"","category":"section"},{"location":"manual/inputs/","page":"Loading Data","title":"Loading Data","text":"moiety\nCrystal\ninfer_bonds!\nBondingRule\nstrip_numbers_from_atom_labels!","category":"page"},{"location":"manual/inputs/#PoreMatMod.moiety","page":"Loading Data","title":"PoreMatMod.moiety","text":"q = moiety(xyz_filename)\n\nGenerates a moiety (Crystal) from an .xyz file found in rc[:paths][:moieties].\n\nUse set_path_to_data or set rc[:paths][:moieties] to change the path from which the XYZ file is read.\n\nAtoms appended with '!' are tagged for replacement via substructure_replace.\n\nBonds are inferred automatically via infer_bonds!.\n\nArguments\n\nxyz_filename::Union{String,Nothing} the moiety input file name, an .xyz file; if set to nothing the moiety is the null set.\nbonding_rules::Union{Vector{BondingRule},Nothing} (optional) a list of rules to use for inferring the bonding network of the atoms loaded from the XYZ file. If set to nothing, the default rules are used.\n\n\n\n\n\n","category":"function"},{"location":"manual/inputs/#Xtals.Crystal","page":"Loading Data","title":"Xtals.Crystal","text":"crystal = Crystal(filename;\n    check_neutrality=true, net_charge_tol=1e-4,\n    check_overlap=true, convert_to_p1=true, \n    read_bonds_from_file=false, wrap_coords=true,\n    include_zero_charges=true,\n    remove_duplicates=false,\n    species_col=[\"_atom_site_type_symbol\", \"_atom_site_label\"]\n    ) # read from file\n\ncrystal = Crystal(name, box, atoms, charges) # construct from matter, no bonds, P1-symmetry assumed\n\nRead a crystal structure file (.cif or .cssr) and populate a Crystal data structure, or construct a Crystal data structure directly.\n\nArguments\n\nfilename::String: the name of the crystal structure file (include \".cif\" or \".cssr\") read from PATH_TO_CRYSTALS.\ncheck_neutrality::Bool: check for charge neutrality\nnet_charge_tol::Float64: when checking for charge neutrality, throw an error if the absolute value of the net charge is larger than this value.\ncheck_overlap::Bool: throw an error if overlapping atoms are detected.\nconvert_to_p1::Bool: If the structure is not in P1 it will be converted to   P1 symmetry using the symmetry rules from the _symmetry_equiv_pos_as_xyz list in the .cif file.   (We do not use the space groups name to look up symmetry rules).\nread_bonds_from_file::Bool: Whether or not to read bonding information from   cif file. If false, the bonds can be inferred later. note that, if the crystal is not in P1 symmetry, we cannot both read bonds and convert to P1 symmetry.\nwrap_coords::Bool: if true, enforce that fractional coords of atoms and charges are in [0,1]³ by mod(x, 1)\ninclude_zero_charges::Bool: if false, do not include in crystal.charges atoms which have zero charges, in order to speed up the electrostatic calculations.   If true, include the atoms in crystal.charges that have zero charge, ensuring that the number of atoms is equal to the number of charges and that crystal.charges.coords.xf and crystal.atoms.coords.xf are the same.\nremove_duplicates::Bool: remove duplicate atoms and charges. an atom is duplicate only if it is the same species.\nspecies_col::Array{String}: which column to use for species identification for crystal.atoms.species. we use a priority list:   we check for the first entry of species_col in the .cif file; if not present, we then use the second entry, and so on.\ninfer_bonds::Bool: if true, bonds are inferred automatically. If set, must specify periodic_boundaries. By default, bonds are not inferred.\nperiodic_boundaries::Union{Bool, Missing}: use with infer_bonds to specify treatment of the unit cell boundary.  Set true to treat the unit cell edge as a periodic boundary (allow bonds across it); set false to restrict bonding to within the local unit cell. By default, no bonds are inferred.\nabsolute_path::Bool: set true to load from an absolute path instead of the default path stored in rc[:paths][:crystals].\n\nReturns\n\ncrystal::Crystal: A crystal containing the crystal structure information\n\nAttributes\n\nname::AbstractString: name of crystal structure\nbox::Box: unit cell (Bravais Lattice)\natoms::Atoms: list of Atoms in crystal unit cell\ncharges::Charges: list of point charges in crystal unit cell\nbonds::MetaGraph: Unweighted, undirected graph showing all of the atoms   that are bonded within the crystal\nsymmetry::SymmetryInfo: symmetry inforomation\n\n\n\n\n\n","category":"type"},{"location":"manual/inputs/#Xtals.infer_bonds!","page":"Loading Data","title":"Xtals.infer_bonds!","text":"infer_bonds!(crystal, include_bonds_across_periodic_boundaries; bonding_rules=rc[:bonding_rules])\n\nPopulate the bonds in the crystal object based on the bonding rules. If a pair doesn't have a suitable rule then they will not be considered bonded.\n\n:* is considered a wildcard and can be substituted for any species. It is a good idea to include a bonding rule between two :* to allow any atoms to bond as long as they are close enough.\n\nThe bonding rules are hierarchical, i.e. the first bonding rule takes precedence over the latter ones.\n\nArguments\n\ncrystal::Crystal: The crystal that bonds will be added to.\ninclude_bonds_across_periodic_boundaries::Bool: Whether to check across the periodic boundary when calculating bonds.\nbonding_rules::Array{BondingRule, 1}: The array of bonding rules that will be used to fill the bonding information. They are applied in the order that they appear. rc[:bonding_rules] will be used if none provided.\ncalculate_vectors::Bool: Optional. Set true to annotate all edges in the bonds graph with vector information.\n\n\n\n\n\n","category":"function"},{"location":"manual/inputs/#Xtals.BondingRule","page":"Loading Data","title":"Xtals.BondingRule","text":"bonding_rule = BondingRule(:Ca, :O, 2.0)\nbonding_rules = [BondingRule(:H, :*, 1.2),\n                 BondingRule(:*, :*, 1.9)]\n\nA rule for determining if two atoms within a crystal are bonded.\n\nAttributes\n\nspecies_i::Symbol: One of the atoms types for this bond rule\nspecies_j::Symbol: The other atom type for this bond rule\nmax_dist: The maximum distance between the atoms for bonding to occur\n\n\n\n\n\n","category":"type"},{"location":"manual/inputs/#Xtals.strip_numbers_from_atom_labels!","page":"Loading Data","title":"Xtals.strip_numbers_from_atom_labels!","text":"strip_numbers_from_atom_labels!(crystal)\n\nStrip numbers from labels for crystal.atoms. Precisely, for atom in crystal.atoms, find the first number that appears in atom. Remove this number and all following characters from atom. e.g. C12 –> C      Ba12A_3 –> Ba\n\nArguments\n\ncrystal::Crystal: The crystal containing the crystal structure information\n\n\n\n\n\n","category":"function"},{"location":"PoreMatModGO/#PoreMatModGO","page":"PoreMatModGO","title":"PoreMatModGO","text":"","category":"section"},{"location":"PoreMatModGO/","page":"PoreMatModGO","title":"PoreMatModGO","text":"To make PoreMatMod.jl more accessible, an express graphical interface, PoreMatModGO, is provided.   The PoreMatModGO interface, built on Pluto.jl, enables interactive application of chemical substructure find/replace operations with minimal setup and no code provided by the user.","category":"page"},{"location":"PoreMatModGO/","page":"PoreMatModGO","title":"PoreMatModGO","text":"Follow the steps in Getting Started.","category":"page"},{"location":"PoreMatModGO/","page":"PoreMatModGO","title":"PoreMatModGO","text":"Then, simply launch the GUI notebook via Pluto:","category":"page"},{"location":"PoreMatModGO/","page":"PoreMatModGO","title":"PoreMatModGO","text":"using PoreMatMod\r\nPoreMatModGO()","category":"page"},{"location":"PoreMatModGO/","page":"PoreMatModGO","title":"PoreMatModGO","text":"The notebook may take several minutes to launch the first time, especially on Windows.","category":"page"},{"location":"PoreMatModGO/","page":"PoreMatModGO","title":"PoreMatModGO","text":"Prepare file inputs per the manual and load them into PoreMatModGO using the graphical interface.   All replacement modes are available with interactive visual previews and outputs are downloadable in .cif, .xyz, and .vtk file formats.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"DocTestSetup = quote\r\n    using PoreMatMod\r\nend","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The Pluto notebooks (.jl) containing the Julia code and the input files for all examples are in the examples directory.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Click on the images or descriptions below to see Pluto notebooks demonstrating each use case.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"example: Example: Find substructures in a crystal\nIdentify the p-phenylene fragments in IRMOF-1.link     (Image: search example) ","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"example: Example: Generate hypothetical structures\nDecorate IRMOF-1 with a functional group: ortho substitution with an acetylamido group at one quarter of the p-phenylene moieties.link     (Image: example 1) ","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"example: Example: Using different replacement modes\nReplace BDC with nitro-BDC in IRMOF-1 using the different replacement modes to control (i) which linkers are functionalized and (ii) the substitution site on each linker.link     (Image: example1.5) ","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"example: Example: Insert missing hydrogen atoms\nInsert missing H atoms in IRMOF-1.link     (Image: example 2) ","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"example: Example: Repair Disorder and Remove Adsorbates\nCorrect the crystallographic disorder of the PyC-2 ligands and remove guest molecules from the pores of SIFSIX-Cu-2-i.link     (Image: example 3) ","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"example: Example: Generate Missing-Linker Defects\nCreate a new channel in UiO-66 by introducing missing-linker defects and formate ion capping.link     (Image: example 4) ","category":"page"},{"location":"","page":"PoreMatMod","title":"PoreMatMod","text":"(Image: logo.JPG)","category":"page"},{"location":"","page":"PoreMatMod","title":"PoreMatMod","text":"PoreMatMod.jl is a software package in Julia for (i) subgraph matching and (ii) modifying crystal structures. ","category":"page"},{"location":"","page":"PoreMatMod","title":"PoreMatMod","text":"Functioning as a \"find-and-replace\" tool on atomistic crystal structure models of porous materials, PoreMatMod.jl can:","category":"page"},{"location":"","page":"PoreMatMod","title":"PoreMatMod","text":"search crystals for chemical substructures\ncreate libraries of hypothetical structures by e.g. decoration with functional groups\ncorrect artifacts of X-ray structure determination (missing H, disorder, guests)\nintroduce defects into crystal structures","category":"page"},{"location":"","page":"PoreMatMod","title":"PoreMatMod","text":"PoreMatMod.jl implements ","category":"page"},{"location":"","page":"PoreMatMod","title":"PoreMatMod","text":"(for find operations) Ullmann's algorithm for subgraph isomorphism search\n(for replace operations) the orthogonal Procrustes algorithm for point cloud alignment.  ","category":"page"},{"location":"","page":"PoreMatMod","title":"PoreMatMod","text":"Periodic boundary conditions are respected, and the unit cell is preserved.","category":"page"},{"location":"","page":"PoreMatMod","title":"PoreMatMod","text":"While developed primarily for porous crystals such as metal-organic frameworks (MOFs), PoreMatMod.jl can operate on any periodic atomistic system as well as discrete molecules.","category":"page"},{"location":"#Introductory-example:-creating-a-functionalized-MOF-structure","page":"PoreMatMod","title":"Introductory example: creating a functionalized MOF structure","text":"","category":"section"},{"location":"","page":"PoreMatMod","title":"PoreMatMod","text":"Suppose we wish to decorate the linkers of IRMOF-1 with trifluoromethyl (tfm) groups. The PoreMatMod.jl code below accomplishes this by (i) searching the parent IRMOF-1 structure for a phenylene query fragment and (ii) replacing each instance with a tfm-phenylene replacement fragment to give the child structure.","category":"page"},{"location":"","page":"PoreMatMod","title":"PoreMatMod","text":"# read crystal structure of the parent MOF\r\nparent_xtal = Crystal(\"IRMOF-1.cif\")\r\n\r\n# read query and replacement fragments\r\nquery_fragment       = moiety(\"p-phenylene.xyz\")  # masked atoms marked with !\r\nreplacement_fragment = moiety(\"tfm-p-phenylene.xyz\")\r\n\r\n# (1) search parent structure for query fragment\r\n# (2) replace occurrences of query fragment with replacement fragments\r\n#     (with randomly chosen orientations)\r\nchild_xtal = replace(parent_xtal, query_fragment => replacement_fragment)","category":"page"},{"location":"","page":"PoreMatMod","title":"PoreMatMod","text":"(Image: )","category":"page"},{"location":"","page":"PoreMatMod","title":"PoreMatMod","text":"example: Further examples\nSee the examples page for links to Pluto notebooks with PoreMatMod.jl code to accomplish various find-and-replace tasks.","category":"page"},{"location":"","page":"PoreMatMod","title":"PoreMatMod","text":"note: Please cite our paper!\nIf you found PoreMatMod.jl useful, please cite our paper:A. Henle, N. Gantzler, P. Thallapally, X. Fern, C. Simon. PoreMatMod.jl: Julia package for in silico post-synthetic modification of crystal structure models. Journal of Chemical Information and Modeling. (2022)","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"DocTestSetup = quote\n    using PoreMatMod\n    parent = Crystal(\"IRMOF-1.cif\")\n    infer_bonds!(parent, true)\n    query = moiety(\"p-phenylene.xyz\")\nend","category":"page"},{"location":"manual/find/#Subgraph-matching-(substructure-searches)","page":"Substructure Search","title":"Subgraph matching (substructure searches)","text":"","category":"section"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"PoreMatMod.jl conducts subgraph matching, i.e. searches for subgraphs of a parent graph isomorphic to a query graph, using Ullmann's algorithm for subgraph isomorphisms.","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"For subgraph matching, both the parent crystal structure and query fragment are represented by node-labeled (by the chemical species) graphs (nodes = atoms, edges = bonds). For crystals, bonds across the unit cell boundaries of periodic materials are accounted for, allowing us to find subgraph isomorphisms when the fragment is split across a unit cell boundary.","category":"page"},{"location":"manual/find/#Substructure-Searches:-how-to","page":"Substructure Search","title":"Substructure Searches: how to","text":"","category":"section"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"To learn by example, suppose we wish to search the IRMOF-1 crystal structure for p-phenylene fragments.","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"(Image: find graphic)","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"First, we load the query fragment and parent crystal structure:","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"parent = Crystal(\"IRMOF-1.cif\")\ninfer_bonds!(parent_xtal, true) # true to infer bonds across the periodic boundary\n\nquery = moiety(\"p-phenylene.xyz\")","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"then execute a search for subgraphs of the parent that \"match\" (are isomorphic to) the graph of the query fragment:","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"search = substructure_search(query, parent)\n# output\np-phenylene.xyz ∈ IRMOF-1.cif\n96 hits in 24 locations.","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"note: Syntactic sugar for substructure search\nThe ∈ (\\in then hit Tab for this Unicode character) or in infix operators will also execute the search:search = query ∈ parent\n# or\nsearch = query in parent\n# or\nsearch = substructure_search(query, parent)","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"Both functions substructure_search and ∈ return a Search object with attributes:","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"search.query: the query in the search\nsearch.parent: the parent in the search\nsearch.isomorphisms: the result of a search–-a nested vector giving the query-to-parent correpondence dictionaries.","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"search.isomorphisms\n# output\n24-element Vector{Vector{Dict{Int64, Int64}}}:\n [Dict(5 => 185, 4 => 245, 6 => 197, 7 => 414, 2 => 306, 10 => 341, 9 => 402, 8 => 329, 3 => 318, 1 => 233…), Dict(5 => 197, 4 => 233, 6 => 185, 7 => 402, 2 => 318, 10 => 329, 9 => 414, 8 => 341, 3 => 306, 1 => 245…), Dict(5 => 185, 4 => 318, 6 => 197, 7 => 341, 2 => 233, 10 => 414, 9 => 329, 8 => 402, 3 => 245, 1 => 306…), Dict(5 => 197, 4 => 306, 6 => 185, 7 => 329, 2 => 245, 10 => 402, 9 => 341, 8 => 414, 3 => 233, 1 => 318…)]\n [Dict(5 => 186, 4 => 246, 6 => 198, 7 => 413, 2 => 305, 10 => 342, 9 => 401, 8 => 330, 3 => 317, 1 => 234…), Dict(5 => 198, 4 => 234, 6 => 186, 7 => 401, 2 => 317, 10 => 330, 9 => 413, 8 => 342, 3 => 305, 1 => 246…), Dict(5 => 186, 4 => 317, 6 => 198, 7 => 342, 2 => 234, 10 => 413, 9 => 330, 8 => 401, 3 => 246, 1 => 305…), Dict(5 => 198, 4 => 305, 6 => 186, 7 => 330, 2 => 246, 10 => 401, 9 => 342, 8 => 413, 3 => 234, 1 => 317…)]\n [Dict(5 => 187, 4 => 248, 6 => 200, 7 => 415, 2 => 308, 10 => 344, 9 => 404, 8 => 331, 3 => 319, 1 => 235…), Dict(5 => 200, 4 => 235, 6 => 187, 7 => 404, 2 => 319, 10 => 331, 9 => 415, 8 => 344, 3 => 308, 1 => 248…), Dict(5 => 187, 4 => 319, 6 => 200, 7 => 344, 2 => 235, 10 => 415, 9 => 331, 8 => 404, 3 => 248, 1 => 308…), Dict(5 => 200, 4 => 308, 6 => 187, 7 => 331, 2 => 248, 10 => 404, 9 => 344, 8 => 415, 3 => 235, 1 => 319…)]\n [Dict(5 => 188, 4 => 247, 6 => 199, 7 => 416, 2 => 307, 10 => 343, 9 => 403, 8 => 332, 3 => 320, 1 => 236…), Dict(5 => 199, 4 => 236, 6 => 188, 7 => 403, 2 => 320, 10 => 332, 9 => 416, 8 => 343, 3 => 307, 1 => 247…), Dict(5 => 188, 4 => 320, 6 => 199, 7 => 343, 2 => 236, 10 => 416, 9 => 332, 8 => 403, 3 => 247, 1 => 307…), Dict(5 => 199, 4 => 307, 6 => 188, 7 => 332, 2 => 247, 10 => 403, 9 => 343, 8 => 416, 3 => 236, 1 => 320…)]\n [Dict(5 => 189, 4 => 255, 6 => 207, 7 => 376, 2 => 262, 10 => 351, 9 => 358, 8 => 333, 3 => 280, 1 => 237…), Dict(5 => 207, 4 => 237, 6 => 189, 7 => 358, 2 => 280, 10 => 333, 9 => 376, 8 => 351, 3 => 262, 1 => 255…), Dict(5 => 189, 4 => 280, 6 => 207, 7 => 351, 2 => 237, 10 => 376, 9 => 333, 8 => 358, 3 => 255, 1 => 262…), Dict(5 => 207, 4 => 262, 6 => 189, 7 => 333, 2 => 255, 10 => 358, 9 => 351, 8 => 376, 3 => 237, 1 => 280…)]\n [Dict(5 => 190, 4 => 256, 6 => 208, 7 => 375, 2 => 261, 10 => 352, 9 => 357, 8 => 334, 3 => 279, 1 => 238…), Dict(5 => 208, 4 => 238, 6 => 190, 7 => 357, 2 => 279, 10 => 334, 9 => 375, 8 => 352, 3 => 261, 1 => 256…), Dict(5 => 190, 4 => 279, 6 => 208, 7 => 352, 2 => 238, 10 => 375, 9 => 334, 8 => 357, 3 => 256, 1 => 261…), Dict(5 => 208, 4 => 261, 6 => 190, 7 => 334, 2 => 256, 10 => 357, 9 => 352, 8 => 375, 3 => 238, 1 => 279…)]\n [Dict(5 => 191, 4 => 254, 6 => 206, 7 => 373, 2 => 264, 10 => 350, 9 => 360, 8 => 335, 3 => 277, 1 => 239…), Dict(5 => 206, 4 => 239, 6 => 191, 7 => 360, 2 => 277, 10 => 335, 9 => 373, 8 => 350, 3 => 264, 1 => 254…), Dict(5 => 191, 4 => 277, 6 => 206, 7 => 350, 2 => 239, 10 => 373, 9 => 335, 8 => 360, 3 => 254, 1 => 264…), Dict(5 => 206, 4 => 264, 6 => 191, 7 => 335, 2 => 254, 10 => 360, 9 => 350, 8 => 373, 3 => 239, 1 => 277…)]\n [Dict(5 => 192, 4 => 253, 6 => 205, 7 => 374, 2 => 263, 10 => 349, 9 => 359, 8 => 336, 3 => 278, 1 => 240…), Dict(5 => 205, 4 => 240, 6 => 192, 7 => 359, 2 => 278, 10 => 336, 9 => 374, 8 => 349, 3 => 263, 1 => 253…), Dict(5 => 192, 4 => 278, 6 => 205, 7 => 349, 2 => 240, 10 => 374, 9 => 336, 8 => 359, 3 => 253, 1 => 263…), Dict(5 => 205, 4 => 263, 6 => 192, 7 => 336, 2 => 253, 10 => 359, 9 => 349, 8 => 374, 3 => 240, 1 => 278…)]\n [Dict(5 => 193, 4 => 252, 6 => 204, 7 => 395, 2 => 290, 10 => 348, 9 => 386, 8 => 337, 3 => 299, 1 => 241…), Dict(5 => 204, 4 => 241, 6 => 193, 7 => 386, 2 => 299, 10 => 337, 9 => 395, 8 => 348, 3 => 290, 1 => 252…), Dict(5 => 193, 4 => 299, 6 => 204, 7 => 348, 2 => 241, 10 => 395, 9 => 337, 8 => 386, 3 => 252, 1 => 290…), Dict(5 => 204, 4 => 290, 6 => 193, 7 => 337, 2 => 252, 10 => 386, 9 => 348, 8 => 395, 3 => 241, 1 => 299…)]\n [Dict(5 => 194, 4 => 251, 6 => 203, 7 => 396, 2 => 289, 10 => 347, 9 => 385, 8 => 338, 3 => 300, 1 => 242…), Dict(5 => 203, 4 => 242, 6 => 194, 7 => 385, 2 => 300, 10 => 338, 9 => 396, 8 => 347, 3 => 289, 1 => 251…), Dict(5 => 194, 4 => 300, 6 => 203, 7 => 347, 2 => 242, 10 => 396, 9 => 338, 8 => 385, 3 => 251, 1 => 289…), Dict(5 => 203, 4 => 289, 6 => 194, 7 => 338, 2 => 251, 10 => 385, 9 => 347, 8 => 396, 3 => 242, 1 => 300…)]\n ⋮\n [Dict(5 => 212, 4 => 271, 6 => 219, 7 => 392, 2 => 283, 10 => 367, 9 => 379, 8 => 356, 3 => 296, 1 => 260…), Dict(5 => 219, 4 => 260, 6 => 212, 7 => 379, 2 => 296, 10 => 356, 9 => 392, 8 => 367, 3 => 283, 1 => 271…), Dict(5 => 212, 4 => 296, 6 => 219, 7 => 367, 2 => 260, 10 => 392, 9 => 356, 8 => 379, 3 => 271, 1 => 283…), Dict(5 => 219, 4 => 283, 6 => 212, 7 => 356, 2 => 271, 10 => 379, 9 => 367, 8 => 392, 3 => 260, 1 => 296…)]\n [Dict(5 => 213, 4 => 276, 6 => 224, 7 => 419, 2 => 314, 10 => 372, 9 => 410, 8 => 361, 3 => 323, 1 => 265…), Dict(5 => 224, 4 => 265, 6 => 213, 7 => 410, 2 => 323, 10 => 361, 9 => 419, 8 => 372, 3 => 314, 1 => 276…), Dict(5 => 213, 4 => 323, 6 => 224, 7 => 372, 2 => 265, 10 => 419, 9 => 361, 8 => 410, 3 => 276, 1 => 314…), Dict(5 => 224, 4 => 314, 6 => 213, 7 => 361, 2 => 276, 10 => 410, 9 => 372, 8 => 419, 3 => 265, 1 => 323…)]\n [Dict(5 => 214, 4 => 275, 6 => 223, 7 => 420, 2 => 313, 10 => 371, 9 => 409, 8 => 362, 3 => 324, 1 => 266…), Dict(5 => 223, 4 => 266, 6 => 214, 7 => 409, 2 => 324, 10 => 362, 9 => 420, 8 => 371, 3 => 313, 1 => 275…), Dict(5 => 214, 4 => 324, 6 => 223, 7 => 371, 2 => 266, 10 => 420, 9 => 362, 8 => 409, 3 => 275, 1 => 313…), Dict(5 => 223, 4 => 313, 6 => 214, 7 => 362, 2 => 275, 10 => 409, 9 => 371, 8 => 420, 3 => 266, 1 => 324…)]\n [Dict(5 => 215, 4 => 273, 6 => 221, 7 => 418, 2 => 316, 10 => 369, 9 => 412, 8 => 363, 3 => 322, 1 => 267…), Dict(5 => 221, 4 => 267, 6 => 215, 7 => 412, 2 => 322, 10 => 363, 9 => 418, 8 => 369, 3 => 316, 1 => 273…), Dict(5 => 215, 4 => 322, 6 => 221, 7 => 369, 2 => 267, 10 => 418, 9 => 363, 8 => 412, 3 => 273, 1 => 316…), Dict(5 => 221, 4 => 316, 6 => 215, 7 => 363, 2 => 273, 10 => 412, 9 => 369, 8 => 418, 3 => 267, 1 => 322…)]\n [Dict(5 => 216, 4 => 274, 6 => 222, 7 => 417, 2 => 315, 10 => 370, 9 => 411, 8 => 364, 3 => 321, 1 => 268…), Dict(5 => 222, 4 => 268, 6 => 216, 7 => 411, 2 => 321, 10 => 364, 9 => 417, 8 => 370, 3 => 315, 1 => 274…), Dict(5 => 216, 4 => 321, 6 => 222, 7 => 370, 2 => 268, 10 => 417, 9 => 364, 8 => 411, 3 => 274, 1 => 315…), Dict(5 => 222, 4 => 315, 6 => 216, 7 => 364, 2 => 274, 10 => 411, 9 => 370, 8 => 417, 3 => 268, 1 => 321…)]\n [Dict(5 => 225, 4 => 303, 6 => 231, 7 => 424, 2 => 310, 10 => 399, 9 => 406, 8 => 381, 3 => 328, 1 => 285…), Dict(5 => 231, 4 => 285, 6 => 225, 7 => 406, 2 => 328, 10 => 381, 9 => 424, 8 => 399, 3 => 310, 1 => 303…), Dict(5 => 225, 4 => 328, 6 => 231, 7 => 399, 2 => 285, 10 => 424, 9 => 381, 8 => 406, 3 => 303, 1 => 310…), Dict(5 => 231, 4 => 310, 6 => 225, 7 => 381, 2 => 303, 10 => 406, 9 => 399, 8 => 424, 3 => 285, 1 => 328…)]\n [Dict(5 => 226, 4 => 304, 6 => 232, 7 => 423, 2 => 309, 10 => 400, 9 => 405, 8 => 382, 3 => 327, 1 => 286…), Dict(5 => 232, 4 => 286, 6 => 226, 7 => 405, 2 => 327, 10 => 382, 9 => 423, 8 => 400, 3 => 309, 1 => 304…), Dict(5 => 226, 4 => 327, 6 => 232, 7 => 400, 2 => 286, 10 => 423, 9 => 382, 8 => 405, 3 => 304, 1 => 309…), Dict(5 => 232, 4 => 309, 6 => 226, 7 => 382, 2 => 304, 10 => 405, 9 => 400, 8 => 423, 3 => 286, 1 => 327…)]\n [Dict(5 => 227, 4 => 302, 6 => 230, 7 => 421, 2 => 312, 10 => 398, 9 => 408, 8 => 383, 3 => 325, 1 => 287…), Dict(5 => 230, 4 => 287, 6 => 227, 7 => 408, 2 => 325, 10 => 383, 9 => 421, 8 => 398, 3 => 312, 1 => 302…), Dict(5 => 227, 4 => 325, 6 => 230, 7 => 398, 2 => 287, 10 => 421, 9 => 383, 8 => 408, 3 => 302, 1 => 312…), Dict(5 => 230, 4 => 312, 6 => 227, 7 => 383, 2 => 302, 10 => 408, 9 => 398, 8 => 421, 3 => 287, 1 => 325…)]\n [Dict(5 => 228, 4 => 301, 6 => 229, 7 => 422, 2 => 311, 10 => 397, 9 => 407, 8 => 384, 3 => 326, 1 => 288…), Dict(5 => 229, 4 => 288, 6 => 228, 7 => 407, 2 => 326, 10 => 384, 9 => 422, 8 => 397, 3 => 311, 1 => 301…), Dict(5 => 228, 4 => 326, 6 => 229, 7 => 397, 2 => 288, 10 => 422, 9 => 384, 8 => 407, 3 => 301, 1 => 311…), Dict(5 => 229, 4 => 311, 6 => 228, 7 => 384, 2 => 301, 10 => 407, 9 => 397, 8 => 422, 3 => 288, 1 => 326…)]","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"In this example, the query fragment (p-phenylene) occurs in 24 different location in the parent crystal structure, with 4 symmetry-equivalent isomorphisms at each location, for a total of 96 subgraph isomorphisms.","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"The number of locations–-the number of unique substructures of the parent to which the query is isomorphic–-is the length of search.isomorphisms.","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"nb_locations(search) # = length(search.isomorphisms)\n# output\n24","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"Element i_loc of search.isomorphisms, search.isomorphisms[i_loc], is a vector of isomorphisms that share the same subset of atoms in the parent, each of which correspond to a different orientation of the query overlaying that parent substructure. The function nb_ori_at_loc outputs a vector whose element i_loc is the number of overlay orientations at that location.","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"nb_ori_at_loc(search)  # 24-element Vector{Int64}: [4, 4, 4, ..., 4]","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"Each individual isomorphism isom = search.isomorphisms[i_loc][i_ori] for a specific location i_loc and orientation i_ori indicates the correspondence from the query to the parent struture: if atom q of the query maps to atom p of the parent, then isom[q] == p.","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"The total number of isomorphisms is given by nb_isomorphisms(search).","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"nb_isomorphisms(search) # = sum(nb_ori_at_loc(search))\n# output\n96","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"N.b. to generate a Crystal containing only the substructures of the parent which are isomorphic to the query, use:","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"isomorphic_substructures(search)\n# output\nName: IRMOF-1.cif\nBravais unit cell of a crystal.\n\tUnit cell angles α = 90.000000 deg. β = 90.000000 deg. γ = 90.000000 deg.\n\tUnit cell dimensions a = 25.832000 Å. b = 25.832000 Å, c = 25.832000 Å\n\tVolume of unit cell: 17237.492730 Å³\n\n\t# atoms = 240\n\t# charges = 0\n\tchemical formula: C₁₄₄H₉₆\n\tspace Group: P1\n\tsymmetry Operations:\n\t\t'x, y, z'\n\tbonding graph:\n\t\t# vertices = 240\n\t\t# edges = 240","category":"page"},{"location":"manual/find/#Stereochemistry-and-Isomorphism","page":"Substructure Search","title":"Stereochemistry and Isomorphism","text":"","category":"section"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"The node-labeled graph representation of a molecule/crystal structure is invariant with respect to stereochemistry. In other words, every rotational/conformational state and stereoisomer of a structure share the same graph representation. What this means is that PoreMatMod.jl may find more subgraph matches than you may first expect. ","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"Example 1: Suppose we search for a carboxylate with beta hydrogen in acrylate.","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"(Image: symmetry viz)","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"There is clearly only one substructure of acrylate that matches the query. However, there are two subgraph isomorphisms, because swapping the oxygen atoms in the point cloud representation results in the same graph representation.  The above image gives a closer look at how these degenerate representations translate to multiple isomorphisms for a single occurence of a fragment in a structure.","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"Example 2: Suppose we search the IRMOF-1 parent structure for the BDC.xyz linker as the query instead of the more minimal p-phenylene query fragment. Thanks to the two carboxyl groups, the total number of isomorphisms is multiplied by a factor of 4, due to the 180 degree rotation of these groups having no effect on the graph representation. The number of locations at which the isomorphisms are found, however, is unchanged.","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"query = moiety(\"BDC.xyz\")\nsearch = query ∈ parent\nnb_isomorphisms(search) \n# output\n384","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"nb_locations(search) \n# output\n24","category":"page"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"Note: We advise to define the query using the most minimal structure that matches the targeted parent substructure.","category":"page"},{"location":"manual/find/#Documentation-for-functions","page":"Substructure Search","title":"Documentation for functions","text":"","category":"section"},{"location":"manual/find/","page":"Substructure Search","title":"Substructure Search","text":"Search\nsubstructure_search\nnb_ori_at_loc\nnb_isomorphisms\nnb_locations\nisomorphic_substructures","category":"page"},{"location":"manual/find/#PoreMatMod.Search","page":"Substructure Search","title":"PoreMatMod.Search","text":"search = Search(parent, query, results)\n\nStores the parent and query used for a substructure search and the results (isomorphisms) of the subgraph matching algorithm.\n\nattributes\n\nsearch.parent::Crystal                           # the parent in the search\nsearch.query::Crystal                            # the query in the search\nsearch.isomorphisms::Vector{Vector{Vector{Int}}} # the query-to-parent correspondences\n\nThe isomorphisms are grouped by location in the parent Crystal and can be examined using nb_isomorphisms, nb_locations, and nb_ori_at_loc.\n\nSubgraph isomorphisms are encoded like\n\nisom = search.isomorphisms[i_loc][i_ori] = [7, 21, 9]\n\nwhere isom[k] is the index of the atom in search.parent corresponding to atom k in search.query for the isomorphism at location i_loc and orientation i_ori.\n\n\n\n\n\n","category":"type"},{"location":"manual/find/#PoreMatMod.substructure_search","page":"Substructure Search","title":"PoreMatMod.substructure_search","text":"substructure_search(query, parent; disconnected_component=false)\n\nSearches for a substructure within a Crystal and returns a Search struct containing all identified subgraph isomorphisms.  Matches are made on the basis of atomic species and chemical bonding networks, including bonds across unit cell periodic boundaries.  The search moiety may optionally contain markup for designating atoms to replace with other moieties.\n\nArguments\n\nquery::Crystal the search moiety\nparent::Crystal the parent structure\ndisconnected_component::Bool=false if true, disables substructure searching (e.g. for finding guest molecules)\n\n\n\n\n\n","category":"function"},{"location":"manual/find/#PoreMatMod.nb_ori_at_loc","page":"Substructure Search","title":"PoreMatMod.nb_ori_at_loc","text":"nb_ori_at_loc(search)\n\nReturns a array containing the number of isomorphic configurations at a given location (collection of atoms) for which the specified Search results contain isomorphisms.\n\nArguments\n\nsearch::Search a substructure Search object\n\n\n\n\n\n","category":"function"},{"location":"manual/find/#PoreMatMod.nb_isomorphisms","page":"Substructure Search","title":"PoreMatMod.nb_isomorphisms","text":"nb_isomorphisms(search::Search)\n\nReturns the number of isomorphisms found in the specified Search\n\nArguments\n\nsearch::Search a substructure Search object\n\n\n\n\n\n","category":"function"},{"location":"manual/find/#PoreMatMod.nb_locations","page":"Substructure Search","title":"PoreMatMod.nb_locations","text":"nb_locations(search::Search)\n\nReturns the number of unique locations in the parent (sets of atoms in the parent) at which the specified Search results contain isomorphisms.\n\nArguments\n\nsearch::Search a substructure Search object\n\n\n\n\n\n","category":"function"},{"location":"manual/find/#PoreMatMod.isomorphic_substructures","page":"Substructure Search","title":"PoreMatMod.isomorphic_substructures","text":"iso_structs = isomorphic_substructures(s::Search)::Crystal\n\nReturns a crystal consisting of the atoms of the parent involved in subgraph isomorphisms in the search s\n\n\n\n\n\n","category":"function"}]
}
